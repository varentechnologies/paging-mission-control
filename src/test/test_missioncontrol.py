import unittest
from missioncontrol.missioncontrol import parse_telemetry_data


class TestMissionControl(unittest.TestCase):
    def are_dicts_equal(self, first, second):
        for k, v in first.items():
            second_v = second.get(v, None)
            if second_v != v:
                return False
        return True

    def test_batt_and_thermostat_alarms(self):
        input = ["20180101 23:01:05.001|1001|101|98|25|20|99.9|TSTAT",
                 "20180101 23:01:09.521|1000|17|15|9|8|7.8|BATT",
                 "20180101 23:01:26.011|1001|101|98|25|20|99.8|TSTAT",
                 "20180101 23:01:38.001|1000|101|98|25|20|102.9|TSTAT",
                 "20180101 23:01:49.021|1000|101|98|25|20|87.9|TSTAT",
                 "20180101 23:02:09.014|1001|101|98|25|20|89.3|TSTAT",
                 "20180101 23:02:10.021|1001|101|98|25|20|89.4|TSTAT",
                 "20180101 23:02:11.302|1000|17|15|9|8|7.7|BATT",
                 "20180101 23:03:03.008|1000|101|98|25|20|102.7|TSTAT",
                 "20180101 23:03:05.009|1000|101|98|25|20|101.2|TSTAT",
                 "20180101 23:04:06.017|1001|101|98|25|20|89.9|TSTAT",
                 "20180101 23:04:11.531|1000|17|15|9|8|7.9|BATT",
                 "20180101 23:05:05.021|1001|101|98|25|20|89.9|TSTAT",
                 "20180101 23:05:07.421|1001|17|15|9|8|7.9|BATT"]
        expected_result = [{"satelliteId": 1000,
                            "severity": "RED HIGH",
                            "component": "TSTAT",
                            "timestamp": "2018-01-01T23:01:38.001Z"},
                           {"satelliteId": 1000,
                            "severity": "RED LOW",
                            "component": "BATT",
                            "timestamp": "2018-01-01T23:01:09.521Z"}]
        alarms = parse_telemetry_data(input)
        self.assertEqual(alarms, expected_result)

    def test_batt_alarm(self):
        input = ["20180101 23:01:05.001|1001|101|98|25|20|99.9|TSTAT",
                 "20180101 23:01:09.521|1000|17|15|9|8|7.8|BATT",
                 "20180101 23:01:26.011|1001|101|98|25|20|99.8|TSTAT",
                 "20180101 23:01:49.021|1000|101|98|25|20|87.9|TSTAT",
                 "20180101 23:02:09.014|1001|101|98|25|20|89.3|TSTAT",
                 "20180101 23:02:10.021|1001|101|98|25|20|89.4|TSTAT",
                 "20180101 23:02:11.302|1000|17|15|9|8|7.7|BATT",
                 "20180101 23:03:03.008|1000|101|98|25|20|102.7|TSTAT",
                 "20180101 23:03:05.009|1000|101|98|25|20|101.2|TSTAT",
                 "20180101 23:04:06.017|1001|101|98|25|20|89.9|TSTAT",
                 "20180101 23:04:11.531|1000|17|15|9|8|7.9|BATT",
                 "20180101 23:05:05.021|1001|101|98|25|20|89.9|TSTAT",
                 "20180101 23:05:07.421|1001|17|15|9|8|7.9|BATT"]
        expected_result = [{"satelliteId": 1000,
                            "severity": "RED LOW",
                            "component": "BATT",
                            "timestamp": "2018-01-01T23:01:09.521Z"}]
        alarms = parse_telemetry_data(input)
        self.assertEqual(alarms, expected_result)

    def test_thermostat_alarms(self):
        input = ["20180101 23:01:05.001|1001|101|98|25|20|99.9|TSTAT",
                 "20180101 23:01:09.521|1000|17|15|9|8|7.8|BATT",
                 "20180101 23:01:26.011|1001|101|98|25|20|99.8|TSTAT",
                 "20180101 23:01:38.001|1000|101|98|25|20|102.9|TSTAT",
                 "20180101 23:01:49.021|1000|101|98|25|20|87.9|TSTAT",
                 "20180101 23:02:09.014|1001|101|98|25|20|89.3|TSTAT",
                 "20180101 23:02:10.021|1001|101|98|25|20|89.4|TSTAT",
                 "20180101 23:03:03.008|1000|101|98|25|20|102.7|TSTAT",
                 "20180101 23:03:05.009|1000|101|98|25|20|101.2|TSTAT",
                 "20180101 23:04:06.017|1001|101|98|25|20|89.9|TSTAT",
                 "20180101 23:04:11.531|1000|17|15|9|8|7.9|BATT",
                 "20180101 23:05:05.021|1001|101|98|25|20|89.9|TSTAT",
                 "20180101 23:09:07.421|1001|17|15|9|8|7.9|BATT"]
        expected_result = [{"satelliteId": 1000,
                            "severity": "RED HIGH",
                            "component": "TSTAT",
                            "timestamp": "2018-01-01T23:01:38.001Z"}]
        alarms = parse_telemetry_data(input)
        self.assertEqual(alarms, expected_result)

    def test_no_alarms(self):
        input = ["20180101 23:01:05.001|1001|101|98|25|20|99.9|TSTAT",
                 "20180101 23:01:26.011|1001|101|98|25|20|99.8|TSTAT",
                 "20180101 23:01:49.021|1000|101|98|25|20|87.9|TSTAT",
                 "20180101 23:02:09.014|1001|101|98|25|20|89.3|TSTAT",
                 "20180101 23:02:10.021|1001|101|98|25|20|89.4|TSTAT",
                 "20180101 23:04:06.017|1001|101|98|25|20|89.9|TSTAT",
                 "20180101 23:04:11.531|1000|17|15|9|8|9.9|BATT",
                 "20180101 23:05:05.021|1001|101|98|25|20|89.9|TSTAT",
                 "20180101 23:05:07.421|1001|17|15|9|8|9.9|BATT"]
        expected_result = []
        alarms = parse_telemetry_data(input)
        self.assertEqual(alarms, expected_result)

    def test_no_alarms_not_enough_violations(self):
        input = ["20180101 23:01:05.001|1001|101|98|25|20|199.9|TSTAT",
                 "20180101 23:01:26.011|1001|101|98|25|20|99.8|TSTAT",
                 "20180101 23:01:49.021|1000|101|98|25|20|187.9|TSTAT",
                 "20180101 23:02:09.014|1001|101|98|25|20|89.3|TSTAT",
                 "20180101 23:02:10.021|1001|101|98|25|20|89.4|TSTAT",
                 "20180101 23:04:06.017|1001|101|98|25|20|89.9|TSTAT",
                 "20180101 23:04:11.531|1000|17|15|9|8|9.9|BATT",
                 "20180101 23:05:05.021|1001|101|98|25|20|89.9|TSTAT",
                 "20180101 23:05:07.421|1001|17|15|9|8|1.9|BATT"]
        expected_result = []
        alarms = parse_telemetry_data(input)
        self.assertEqual(alarms, expected_result)

    def test_no_alarms_too_much_time_between_intervals(self):
        input = ["20180101 23:01:05.001|1001|101|98|25|20|99.9|TSTAT",
                 "20180101 23:01:09.521|1000|17|15|9|8|7.8|BATT",
                 "20180101 23:01:26.011|1001|101|98|25|20|99.8|TSTAT",
                 "20180101 23:01:38.001|1000|101|98|25|20|102.9|TSTAT",
                 "20180101 23:01:49.021|1000|101|98|25|20|87.9|TSTAT",
                 "20180101 23:02:09.014|1001|101|98|25|20|89.3|TSTAT",
                 "20180101 23:02:10.021|1001|101|98|25|20|89.4|TSTAT",
                 "20180101 23:02:11.302|1000|17|15|9|8|7.7|BATT",
                 "20180102 23:03:03.008|1000|101|98|25|20|102.7|TSTAT",
                 "20180102 23:03:05.009|1000|101|98|25|20|101.2|TSTAT",
                 "20180102 23:04:06.017|1001|101|98|25|20|89.9|TSTAT",
                 "20180102 23:04:11.531|1000|17|15|9|8|7.9|BATT",
                 "20180102 23:05:05.021|1001|101|98|25|20|89.9|TSTAT",
                 "20180102 23:05:07.421|1001|17|15|9|8|7.9|BATT"]
        expected_result = []
        alarms = parse_telemetry_data(input)
        self.assertEqual(alarms, expected_result)


if __name__ == "__main__":
    unittest.main()
